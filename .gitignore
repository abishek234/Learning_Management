# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


import React, { useEffect, useState } from "react";
import axios from 'axios';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import SideBar from "./SideBar";
import Navbar from "./Navbar";
import './Profile.css';
import { FaUser, FaEnvelope, FaPhone, FaCalendarAlt, FaMapMarkerAlt } from 'react-icons/fa'; // Importing icons

function Profile() {
    const [user, setUser] = useState(null);
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [otp, setOtp] = useState('');
    const [isOtpSent, setIsOtpSent] = useState(false);
    const [showPasswordModal, setShowPasswordModal] = useState(false);
    
    const id = localStorage.getItem('id');
    const email = localStorage.getItem('email');

    // Fetch user data on component mount
    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await axios.get(`http://localhost:7000/api/users/${id}`);
                setUser(response.data);
            } catch (error) {
                console.error('Error fetching user data:', error);
                toast.error("Failed to load user data.");
            }
        };

        fetchUserData();
    }, [id]);

    // Send OTP to user's email
    const sendOtp = async () => {
        try {
            await axios.post(`http://localhost:7000/api/users/send-otp`, { email });
            toast.success("OTP sent to your email.");
            setIsOtpSent(true);
        } catch (error) {
            console.error("Error sending OTP:", error);
            toast.error("Failed to send OTP.");
        }
    };

    // Verify OTP and then allow password change
    const verifyOtpAndChangePassword = async (e) => {
        e.preventDefault();
        if (newPassword !== confirmPassword) {
            toast.error("Passwords do not match.");
            return;
        }

        try {
            await axios.post(`http://localhost:7000/api/users/verify-otp`, { email, otp });
            setShowPasswordModal(true);
        } catch (error) {
            console.error("Error verifying OTP:", error);
            toast.error("Invalid OTP.");
        }
    };

    // Update password after verifying OTP
    const handleUpdatePassword = async () => {
        try {
            await axios.put(`http://localhost:7000/api/users/${id}`, { password: newPassword });
            toast.success("Password updated successfully.");
            setNewPassword('');
            setConfirmPassword('');
            setOtp('');
            setIsOtpSent(false);
            setShowPasswordModal(false);
        } catch (error) {
            console.error("Error updating password:", error);
            toast.error("Failed to update password.");
        }
    };

    if (!user) return <div className="loading">Loading...</div>;

    return (
        <>
            <div>
                <SideBar current={"profile"} />
                <section id="content">
                    <Navbar />
                    <main className="t">
                        <div className="profile-info">
                            <h2>User Information</h2>
                            <p><FaUser /> <strong>Username:</strong> {user.username}</p>
                            <p><FaEnvelope /> <strong>Email:</strong> {user.email}</p>
                            <p><FaPhone /> <strong>Phone Number:</strong> {user.phno}</p>
                            <p><FaCalendarAlt /> <strong>Date of Birth:</strong> {user.dob}</p>
                            <p><FaMapMarkerAlt /> <strong>Location:</strong> {user.location}</p>
                            <p><strong>Profession:</strong> {user.profession}</p>
                        </div>

                        {/* Change Password Section */}
                        <div className="change-password">
                            <h2>Change Password</h2>
                            {!isOtpSent ? (
                                <button className="send-otp-button" onClick={sendOtp}>Send OTP</button>
                            ) : (
                                <form onSubmit={verifyOtpAndChangePassword}>
                                    <input
                                        type="text"
                                        placeholder="Enter OTP"
                                        value={otp}
                                        onChange={(e) => setOtp(e.target.value)}
                                        required
                                    />
                                    <input
                                        type="password"
                                        placeholder="New Password"
                                        value={newPassword}
                                        onChange={(e) => setNewPassword(e.target.value)}
                                        required
                                    />
                                    <input
                                        type="password"
                                        placeholder="Confirm New Password"
                                        value={confirmPassword}
                                        onChange={(e) => setConfirmPassword(e.target.value)}
                                        required
                                    />
                                    <button type="submit">Verify OTP and Change Password</button>
                                </form>
                            )}
                        </div>

                        {/* Modal for Updating Password */}
                        {showPasswordModal && (
                            <div className="modal-profile">
                                <div className="modal-content-profile">
                                    <span className="close" onClick={() => setShowPasswordModal(false)}>&times;</span>
                                    <h2>Update Password</h2>
                                    <form onSubmit={handleUpdatePassword}>
                                        <input
                                            type="password"
                                            placeholder="New Password"
                                            value={newPassword}
                                            onChange={(e) => setNewPassword(e.target.value)}
                                            required
                                        />
                                        <input
                                            type="password"
                                            placeholder="Confirm New Password"
                                            value={confirmPassword}
                                            onChange={(e) => setConfirmPassword(e.target.value)}
                                            required
                                        />
                                        <button type="submit">Update Password</button>
                                    </form>
                                </div>
                            </div>
                        )}
                    </main>
                </section>
            </div>
        </>
    );
}

export default Profile;